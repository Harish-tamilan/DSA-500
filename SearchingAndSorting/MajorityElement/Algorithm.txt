Method-1 O(n^2)-time and O(1)-space

1. Run two loops and check the count of each number and store it in temp.
2. If the count is greater than currentMax, reassign the currentMax and element.
3. Check if the currentMax>n/2, if so return element else return -1.

Method-2 O(nlogn)-time and O(1)-space

1. Sort the array in descending order.
2. Assign the count=1, element=arr[0], temp=1.
3. Start iterating the array from 2nd element (1st index).
4. If arr[i]==arr[i-1] increase the temp.
5. Else check whether temp>count, if so reassign count and element.
6. Assign temp=1, and continue the process.
7. If count or temp > n/2 return the element else return -1.

Method-3 O(n)-time and O(n)-space

1. Create an HashMap.
2. Iterate through the array and store the value and its count.
3. During iteration, if any of the value's count is found to be greater than n/2
    return the element.
4. Else return -1.


Method-4 O(n)-time and O(1)-space

1. Assign the count=1, val=arr[0].
2. Start iterating the array from 2nd element (1st index).
3. If arr[i]==val increase the count, else decrease the count.
4. If count==0, reassign the val to arr[i].
5. Finally, check the number of occurences of val in the array using O(n) iteration .
6. If it is greater than n/2 return the val else return -1.